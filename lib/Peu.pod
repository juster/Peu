=head1 NAME

Peu - A little perl web framework.

=head1 SYNOPSIS

  # Example .psgi file:
  use Peu;

  # If you return just text, it is made the response body.
  sub fooyou :ANY(/api/{version}/{arg}) {
      "Hello, I'm Peu!  You want version $Prm{version}?  $Prm{arg} you!"
  }
  
  # Maybe you want to change other things about the response, first?
  sub old :ANY(/api/1.3) {
      $Res->code( 500 );
      $Res->content-type( 'text/plain' );
      '500 Error';
  }
  
  sub raw :ANY(/psgi) {
      # You can also return a raw PSGI response array-ref.
      return [ '404',
               [ Content-Type => 'text/plain' ],
               [ '<h1>404 Error!</h1>' ],
              ];
  }

  # Want templates? use the :VIEW attribute ...
  
  sub fumanchu :GET(/fu/:variable) :VIEW(fumanchu) {
      # return undef     ^^^^^^^^
      # passes the route parameters as a hashref to the template (fumanchu)
  }
  
  sub fuwhat :GET(/say/what/) :VIEW(fumanchu) {
      # or you can return explicit hash references to templates...
      { 'variable' => 'what?' };
  }

  FIN # <--- this must be at the end of your .psgi file!

  __DATA__
  
  __fumanchu__
  This is the Fu-Manchu template system, based on Mustache.
  It is very incomplete, all it can do it interpolate variables
  by wrapping them in "mustaches": {{variable}}

=head1 DESCRIPTION

Peu is a micro web framework that runs on top of L<Plack>.  It started
off as a Dancer DSL clone but now looks more like Bottle.  Like
Catalyst, Peu uses subroutine attributes to determines routes.  Unlike
Catalyst, the routes are explicit (more like RoR I imagine).

Peu does some funky things like use global variables for passing
around the HTTP request and response objects.  Micro web frameworks
all seem kind of funky anyways and should embrace the funk!

The goal of Peu is to be as minimal as possible.  The only outside
dependencies are L<Plack> and L<Router::Simple>.

=head1 ROUTES

The basic building block of all Peu webapps is, of course, the route.
A route is just a chunk of logic that matches an HTTP request.  HTTP
requests (from clients) can ask for just about any I<URI>.  By
matching a given I<URI> path, a Peu route can easily extract
parameters from the path or request, prepare a response, and send data
to the view.

Peu I<currently> uses L<Router::Simple> so the syntax of the routes is
the same as plain vanilla L<Router::Simple>.  Routes are defined as
subroutine attributes.  Attributes have the appearance of subroutine
calls.  A parenthesis with the route inside directly follow the
attribute.

The attribute names are in all capitals and match the different type
of HTTP requests.  Except for I<ANY> which matches, you guessed it,
any type of HTTP request.  Sound familiar?

=head2 Route Match Syntax

See L<Router::Simple> for basically the same info.  Routes basically just
match stuff in-between the C</>'s in I<URIs>:

=over 4

=item Literals

  /foo/bar

This just matches I<yourapp.com/foo/bar>.  Yawn.

=item C<{} :>

  /:foo/:bar   ( match: /hello/world, /how/areyou )
  /{foo}/{bar}

This matches any I<URI> with two I<components> separated by a C</>.
The C<:> and C<{}> notation are equivalent.  The C<:> looks abit nicer
I think.  The parameters I<"foo"> and I<"bar"> are passed to the
matching route's code inside a hash.

=item C<*>

  /foo/*          ( match: /foo/bar, /foo/barbaz, /foo/bar/etc/etc )
  /foo/*.pl/runme ( match: /foo/bar/baz/cgi.pl/runme, /foo/cgi.pl/runme )

=back

* matches anything, including forward-slashes (C</>).  It is greedy
because it is equivalent to the C<(.+)> regexp.

=item 

=head2 Route Parameters

=head3 Named Parameters

Named route parameters are available to the matching code via the
C<%Prm> package variable.  The key matches the name of the parameter
specified by the route syntax.  The value is the string used by the
actual URI.

=head3 Unnamed Parameters

Unnamed parameters are those I<URI> components which are matched using
a C<*> pattern matcher.  They are available as an arrayref stored in
C<$Prm{'splat'}> but this will change in the future.

=head2 Package Variables

A few package variables are created inside the caller's (that's you!)
namespace.  This is so they can be used inside any of the router
response blocks.

=head1 REQUESTS

The usual HTTP I<POST> and I<GET> parameters are still available.  You
can access them easily using the well known I<CGI.pm> C<param()>
method.

The C<param()> method is available on the L<Peu::Req> object,
which is sneakily stored in the C<$Req> package variable when you load
I<Peu>.  All the other relevant information about the request is
available in the object.

BTW: The L<Peu::Req> object is really just a wafer-thin wrapper around
the L<Plack::Request> object.  It's also shorter to type.  Great
success!

=head1 RESPONSES



=head1 IMPORT SUMMARY

The following variables subroutines and variables are imported into
the calling namespace when you execute C<use Peu;>:

=head2 Subroutines

These subroutines can be used to extend and change the behavior of
a Peu application.  You can use these from within the application
itself if you like having the code all in one place.

For a more modular way to extend Peu, see L<Peu::Ext>.

=over 4

=item C<ATTRIB>

  ATTRIB 'NAME' => sub { my ($argstr, $store_ref) = @_; ... };

This handy doo-dad lets you define new attributes that you can use
in your C<sub> route definition.

=over 4

=item Parameters:

=over 4

=item C<$NAME>

The name of the attribute that triggers your code.  The attribute
will look like C<:NAME> when it follows the C<sub foo> subroutine
definition. (Do not add the colon yourself)

=item C<$CODEREF>

This coderef is triggered when a C<sub> is defined that uses your
attribute.  The coderef is passed the attribute's parameters.  The
parameters are usually just one big string.  Here they are split on
commas and passed to your C<$CODEREF> as a list.

The C<$CODEREF> should return a hash of data that it would like
to associate with the route.  This data can be used later in a
C<WRAP> definition.

=back

=back

=head2 Package Variables

Feel free to use these package variables in your "controller"
subroutines.

=over 4

=item C<$Res>

A L<Peu::Res> (same as L<Plack::Response>) object.  This represents
the response YOU are going to give to the client.

=item C<$Req>

A L<Peu::Req> (same as L<Plack::Request>) object.  This represents
the request that the client has sent us.

=item C<%Prm>

Route parameters, if you have specified any.  These are received
from L<Router::Simple> and are described above in L</ROUTES>.

=back

=head1 EXTENSIONS

See the documentation for L<Peu::Ext> to see how to extend Peu
for more advanced usage.  Peu internally uses the L<Peu::Ext::View>
extension in order to add the :VIEW attribute.

=head1 SEE ALSO

=over 4

=item * L<Plack>

=item * L<Router::Simple>

=item * L<Web::Simple>

=item * L<http://github.com/juster/Peu>

=back

=head1 AUTHOR

Justin Davis C<< <juster at cpan dot org> >>

=head1 LICENSE AND COPYRIGHT

Copyright 2010 Justin Davis.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.
